#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ../handout/challenge --host localhost --port 31337
from pwn import *
from solver import *

# Set up pwntools for the correct architecture
# exe = context.binary = ELF('challenge')
exe = None

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or os.environ.get('HOST', 'localhost')
port = int(args.PORT or 31337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

for i in range(20):
    log.info("Solving %d", i)
    io.recvuntil(b"Crackme: ")
    chal_data = io.recvuntil(b"Password: ", True)
    chal_data = b64d(chal_data)
    solution = solve(chal_data)
    log.info("Solution: %s", solution)
    io.sendline(solution.encode())

# io.recvline_contains(b"You sent:")
# io.sendline(b"./submitter")
io.recvuntil(b"Congratulations! Here is the flag: ")
flag = io.recvline().decode().strip()
# flag = io.recvline_contains(b'LiveCTF{').decode().strip()
log.info('Flag: %s', flag)

